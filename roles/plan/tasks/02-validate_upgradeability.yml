---
# Gather ClusterVersion to determine desired version and upgrade status
- name: Gather Cluster Verion Info
  kubernetes.core.k8s_info:
    api_version: "config.openshift.io/v1"
    kind: ClusterVersion
    name: version
  register: version

# Reduce ClusterVersion Variable DesiredVersion and History
- name: Set MCP Facts
  ansible.builtin.set_fact:
    desired_version: "{{ version | community.general.json_query(dv_query) }}"
    version_history: "{{ version | community.general.json_query(vh_query) }}"
  vars:
    dv_query: 'resources[*].spec.desiredUpdate.version | [0]'
    vh_query: 'resources[*].status.history[0].state | [0]'

# Gather Node to determine node version levels
- name: Gather Node Info
  kubernetes.core.k8s_info:
    api_version: "v1"
    kind: Node
  register: nodes

# Reduce Node Variable to Version
- name: Set Worker Node Version Facts
  ansible.builtin.set_fact:
    worker_node_version: "{{ nodes | community.general.json_query(query) }}"
  vars:
    query: >-
      resources[?(metadata.labels."node-role.kubernetes.io/worker"=='')].metadata.labels."machineconfiguration.openshift.io/release-image-version"

# If ANY worker node has a different version than the desired version proceed
- name: Compare 'desired_version' to 'worker_node_version' for each worker node
  ansible.builtin.set_fact:
    version_skew: "true"
  loop: "{{ worker_node_version }}"
  when: item is version(desired_version,'lt', version_type='semver')

# If the Upgrade is in a Completed state proceed
- name: Determine state of upgrade
  ansible.builtin.set_fact:
    controlplane_ready: "true"
  when: version_history == "Completed"

# Update Upgradeable Status
- name: Report Upgradeable (Success)
  operator_sdk.util.k8s_status:
    api_version: "upgrade.example.com/v1alpha1"
    kind: Plan
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Upgradeable
        status: "True"
        reason: "VersionSkewAndControlPlaneReady"
        message: "DatePlane version is less than desired version and ControlPlane is ready"
        lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"
  when: version_skew is defined and controlplane_ready is defined

# Update Upgradeable Status
- name: Report Upgradeable (Failure)
  operator_sdk.util.k8s_status:
    api_version: "upgrade.example.com/v1alpha1"
    kind: Plan
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Upgradeable
        status: "False"
        reason: "{{ (version_skew is defined) | ternary('ControlPlaneReady', 'VersionSkew') }}"
        message: "{{ (version_skew is defined) | ternary('ControlPlane is not ready', 'Node versions match desired version') }}"
        lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"
  when: version_skew is not defined or controlplane_ready is not defined

# Update Control Flow
- name: Set Worker Nodes Upgradeable
  ansible.builtin.set_fact:
    worker_nodes_upgradeable: "{{ (version_skew is defined and controlplane_ready is defined) | ternary(true, false) }}"